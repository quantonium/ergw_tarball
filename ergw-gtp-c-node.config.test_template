%% -*-Erlang-*-
[{setup, [{data_dir, "/var/lib/ergw"},
	  {log_dir,  "/var/log/gtp-c-node"}             %% NOTE: lager is not using this
	 ]},

 {ergw, [{'$setup_vars',
	  [{"ORIGIN", {value, "epc.mnc001.mcc001.3gppnetwork.org"}}]},
	 {http_api,
	  [{port, 8080},
	   {ip, {0,0,0,0}}
	  ]},

	 {sockets,
	  [{epc, [{type, 'gtp-c'},
		  {ip, {%vrf-irx-addr%}},
		  %%{ip, {192,168,41,121}},
		  {netdev, "vrf-irx"}
		 ]}
	  ]},

	 {vrfs,
	  [{sgi, [{pools,  [{{16#2222, 0, 0, 0, 16#1, 0, 0, 0}, {16#2222, 0, 0, 0, 16#1, 0, 0, 16#7}, 128}]},
	  %%[{sgi, [{pools,  [{{16#FD00, 16#4888, 16#2000, 16#2051, 16#FF2, 0, 0, 16#6000}, {16#FD00, 16#4888, 16#2000, 16#2051, 16#FF2, 0, 0, 16#6F00}, 128}]},
	  %%[{sgi, [{pools,  [{{192, 168, 17, 175}, {192, 168, 17, 200}, 32}]},
	  %%[{XXXsgi, [{pools,  [{{0, 0, 0, 0}, {0, 0, 0, 8}, 32}]},
		  {'MS-Primary-DNS-Server', {8,8,8,8}},
		  {'MS-Secondary-DNS-Server', {8,8,4,4}},
		  {'MS-Primary-NBNS-Server', {127,0,0,1}},
		  {'MS-Secondary-NBNS-Server', {127,0,0,1}}
		 ]}
	  ]},

	 {sx_socket,
	  [{node, 'ergw'},
	   {name, 'ergw'},
	   {ip, {0,0,0,0}
	   }
	  ]},

	 {handlers,
	  [{s11, [{handler, saegw_s11},
		  {sockets, [epc]},
		  {node_selection, [default]}
		 ]}
	  ]},

	 {apns,
	  [{[<<"ssenoauth146">>], [{vrf, sgi}]},
	   {['_'], [{vrf, sgi}]}                         %% wildcard APN
	  ]},

	 {node_selection,
	  [{default,
	    {static,
	     [
	      %% APN NAPTR alternative
	      {"_default.apn.$ORIGIN", {300,64536},
	       [{"x-3gpp-pgw","x-s5-gtp"},{"x-3gpp-pgw","x-s8-gtp"},
		{"x-3gpp-sgw","x-s5-gtp"},{"x-3gpp-sgw","x-s8-gtp"}],
	       "topon.s1u.saegw.$ORIGIN"},
	      {"_default.apn.$ORIGIN", {300,64536},
	       [{"x-3gpp-upf","x-sxb"}],
	       "topon.sx.saegw01.$ORIGIN"},

	      %% A/AAAA record alternatives
	      {"topon.s1u.saegw.$ORIGIN", [{%enodeb-addr%}], []},
	      %%{"topon.s1u.saegw.$ORIGIN", [{192,168,17,12}], []},
	      {"topon.sx.saegw01.$ORIGIN", [{192,168,1,1}], []}
	     ]
	    }
	   }
	  ]
	 }
	]},

 {ergw_aaa, [
	     {ergw_aaa_provider, {ergw_aaa_mock, [{shared_secret, <<"MySecret">>}]}}
	    ]},

 {hackney, [
	    {mod_metrics, exometer}
	   ]},

 {jobs, [{samplers,
	  [{cpu_feedback, jobs_sampler_cpu, []}
	  ]},
	 {queues,
	  [{path_restart,
	    [{regulators, [{counter, [{limit, 100}]}]},
	     {modifiers,  [{cpu_feedback, 10}]} %% 10 = % increment by which to modify the limit
	    ]},
	   {create,
	    [{max_time, 5000}, %% max 5 seconds
	     {regulators, [{rate, [{limit, 100}]}]},
	     {modifiers,  [{cpu_feedback, 10}]} %% 10 = % increment by which to modify the limit
	    ]},
	   {delete,
	    [{regulators, [{counter, [{limit, 100}]}]},
	     {modifiers,  [{cpu_feedback, 10}]} %% 10 = % increment by which to modify the limit
	    ]},
	   {other,
	    [{max_time, 10000}, %% max 10 seconds
	     {regulators, [{rate, [{limit, 1000}]}]},
	     {modifiers,  [{cpu_feedback, 10}]} %% 10 = % increment by which to modify the limit
	    ]}
	  ]}
	]},

 {lager, [
	  {log_root, "/var/log/gtp-c-node"},
	  {colored, true},
	  {error_logger_redirect, true},
	  {crash_log, "crash.log"},
	  {handlers, [
		      {lager_console_backend, [{level, debug}]},
		      {lager_file_backend, [{file, "error.log"}, {level, error}]},
		      {lager_file_backend, [{file, "console.log"}, {level, debug}]}
		     ]}
	 ]}
].
